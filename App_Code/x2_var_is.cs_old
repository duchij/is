using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
//using System.Linq;
using System.Web;
using System.Web.UI;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
//using iTextSharp.text;
//using iTextSharp.text.pdf;
	


/// <summary>
/// Summary description for x2_var
/// </summary>
public class x2_var
{
	public x2_var()
	{
		//
		// TODO: Add constructor logic here
		//
	}

    public int pocetVolnychDni(DateTime datum1, DateTime datum2, string[] volneDni)
    {
        int pocetDni = (datum2 - datum1).Days;
        int pocetDniVikendu = (pocetDni / 7) * 2;
        int pom = pocetDni % 7;

        for (int i = 1; i <= pom; i++)
        {
            DateTime x = datum1.AddDays(i);
           
            if ( (x.DayOfWeek == DayOfWeek.Saturday) || (x.DayOfWeek == DayOfWeek.Sunday) )
            {
                pocetDniVikendu++;
            }

        }

        int dlzka = volneDni.Length;
        DateTime dnesJe = DateTime.Now;
        for (int i = 0; i < dlzka; i++)
        {
            DateTime ckDay = Convert.ToDateTime(volneDni[i] + "." + dnesJe.Year.ToString());
            if ((ckDay >= datum1) && (ckDay <= datum2))
            {
                if ((ckDay.DayOfWeek != DayOfWeek.Sunday) && (ckDay.DayOfWeek != DayOfWeek.Saturday))
                {
                    pocetDniVikendu++;
                }

            }
        }



        return pocetDniVikendu;
    }


    public string unixDate(DateTime datum)
    {
        string mesiac = datum.Month.ToString();
        string den = datum.Day.ToString();
        string rok = datum.Year.ToString();

        return rok + "-" + mesiac + "-" + den;
    }

    public string MSDate(string datum)
    {
        string[] _tmp = datum.Split(new char[] { ' ' });
        string[] tmp = _tmp[0].Split(new char[] { '-' });

        string result = "";
        try
        {

            result = tmp[2] + "." + tmp[1] + "." + tmp[0];
        }
        catch (Exception e)
        {
            result = "chyba:" + e.ToString() + "......." + datum;
        }

        return result;
    }

    public string make_hash(string text)
    {
        MD5CryptoServiceProvider hasher = new MD5CryptoServiceProvider();
        System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();
        byte[] data = enc.GetBytes(text);
        data = hasher.ComputeHash(data);
        return Convert.ToBase64String(data);

    }

    public bool isAlfaNum(string text)
    {
        Regex myReg = new Regex(@"^[a-zA-Z0-9_]*$");
        bool isValid = false;
        if (myReg.IsMatch(text))
        {
            isValid = true;
        }
        else
        {
            isValid = false;
        }
        
        return isValid;
    }

    public string[][] parseSluzba(string data)
    {
        
        string[] my_list = data.Split(new char[] { '\r' });
        
        string[][] sluzby = new string[my_list.Length][];
        
        for (int i = 0; i < my_list.Length; i++)
        {
            
            string[] lekari = my_list[i].Split(new char[] { ',' });
            sluzby[i] = lekari;           
            
        }


        return sluzby;
    }

    public string[][] parseStaz(string data)
    {

        string[] my_list = data.Split(new char[] { '\r' });

        string[][] sluzby = new string[my_list.Length][];

        for (int i = 0; i < my_list.Length; i++)
        {

            string[] lekari = my_list[i].Split(new char[] { ',' });
            sluzby[i] = lekari;

        }


        return sluzby;
    }

    public string[][] parseRozpis(string data)
    {

        string[] my_list = data.Split(new char[] { '~' });

        string[][] sluzby = new string[my_list.Length][];

        for (int i = 0; i < my_list.Length; i++)
        {

            string[] lekari = my_list[i].Split(new char[] { '|' });
            sluzby[i] = lekari;

        }


        return sluzby;
    }

    public string mySendMail(string mail_server, SortedList mailData, bool isHtml)
    {
        MailAddress from = new MailAddress(mailData["from"].ToString());
        MailAddress to = new MailAddress(mailData["to"].ToString());
        MailAddress cc = new MailAddress(mailData["cc"].ToString());

        MailMessage sprava = new MailMessage();
        sprava.From = from;
        sprava.To.Add(to);
        sprava.CC.Add(cc);

        sprava.Subject = mailData["subject"].ToString();
        sprava.IsBodyHtml = isHtml;
        sprava.BodyEncoding = Encoding.UTF8;

        sprava.Body = mailData["message"].ToString();

        SmtpClient mail_klient = new SmtpClient(mail_server);
        try
        {
            mail_klient.Send(sprava);
            return "ok";
        }
        catch (Exception e)
        {
            return e.ToString();
        }


    }

    public bool isEmail(string email)
    {
        bool status = false;
        Regex mojeReg = new Regex(@"^(\w[-._\w]*@\w[-._\w]*\w\.\w{2,6})$");
        if (mojeReg.IsMatch(email.Trim()))
        {
            status = true;
        }
        return status;
    }
//Encryption and Decryption of Text in Asp.Net
//By  Krishna Garad January 21, 2011
//http://www.c-sharpcorner.com/UploadFile/krishnasarala/5184/
    public string EncryptString(string Message, string Passphrase)
        {
            byte[] Results;
            System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();

            // Step 1. We hash the passphrase using MD5
            // We use the MD5 hash generator as the result is a 128 bit byte array
            // which is a valid length for the TripleDES encoder we use below
            MD5CryptoServiceProvider HashProvider = new MD5CryptoServiceProvider();
            byte[] TDESKey = HashProvider.ComputeHash(UTF8.GetBytes(Passphrase));
            // Step 2. Create a new TripleDESCryptoServiceProvider object
            TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider();
            // Step 3. Setup the encoder
            TDESAlgorithm.Key = TDESKey;
            TDESAlgorithm.Mode = CipherMode.ECB;
            TDESAlgorithm.Padding = PaddingMode.PKCS7;
            // Step 4. Convert the input string to a byte[]
            byte[] DataToEncrypt = UTF8.GetBytes(Message);
 
            // Step 5. Attempt to encrypt the string 
            try
            {
                ICryptoTransform Encryptor = TDESAlgorithm.CreateEncryptor();
                Results = Encryptor.TransformFinalBlock(DataToEncrypt, 0, DataToEncrypt.Length);
            }
            finally
            {
                // Clear the TripleDes and Hashprovider services of any sensitive information
                TDESAlgorithm.Clear();
                HashProvider.Clear();
            }
            // Step 6. Return the encrypted string as a base64 encoded string
            return Convert.ToBase64String(Results);
        }



        public string DecryptString(string Message, string Passphrase)
        {
            byte[] Results;
            System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();
            // Step 1. We hash the passphrase using MD5
            // We use the MD5 hash generator as the result is a 128 bit byte array
            // which is a valid length for the TripleDES encoder we use below
            MD5CryptoServiceProvider HashProvider = new MD5CryptoServiceProvider();
            byte[] TDESKey = HashProvider.ComputeHash(UTF8.GetBytes(Passphrase));
            // Step 2. Create a new TripleDESCryptoServiceProvider object
            TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider();
            // Step 3. Setup the decoder
            TDESAlgorithm.Key = TDESKey;
            TDESAlgorithm.Mode = CipherMode.ECB;
            TDESAlgorithm.Padding = PaddingMode.PKCS7;
            // Step 4. Convert the input string to a byte[]
            byte[] DataToDecrypt = Convert.FromBase64String(Message);
 
            // Step 5. Attempt to decrypt the string
            try
            {
                ICryptoTransform Decryptor = TDESAlgorithm.CreateDecryptor();
                Results = Decryptor.TransformFinalBlock(DataToDecrypt, 0, DataToDecrypt.Length);
            }
            finally
            {
                // Clear the TripleDes and Hashprovider services of any sensitive information
                TDESAlgorithm.Clear();
                HashProvider.Clear();
            }
            // Step 6. Return the decrypted string in UTF8 format
            return UTF8.GetString(Results);
        }
    //end of //Encryption and Decryption of Text in Asp.Net


        public Boolean[] getSluzbyOfUser(string name,string mesiac, string rok)
        {
            my_db x_db = new my_db();

            SortedList data_info = x_db.loadSluzbaMonthYear("is_sluzby", mesiac, rok);

            String[][] data = this.parseSluzba(data_info["rozpis"].ToString());

            
            int pocet_dni = DateTime.DaysInMonth(Convert.ToInt32(rok), Convert.ToInt32(mesiac));
            Boolean[] sluzbyName = new bool[pocet_dni];

            int tmp =0;
            string meno = "";
            for (int i = 0; i < pocet_dni; i++)
            {
                tmp = data[i].Length;

                for (int j = 0; j < tmp; j++)
                {
                    meno = data[i][j].ToString();

                    if (meno.IndexOf(name) != -1)
                    {
                        sluzbyName[i] = true;
                        break;
                    }
                    else
                    {
                        sluzbyName[i] = false;
                    }
                }
            }


            //string result = "";



            return sluzbyName;

        }


        public void createVykazPdf(string path, string imagepath)
        {

            /*FileStream pdfOutPut = path + "/vykaz_f.pdf";
            PdfReader pdfReaderVykaz = new PdfReader(path + "/vykaz.pdf");
                        
            PdfStamper pdfstamp = new PdfStamper(pdfReaderVykaz,pdfOutPut);

            
            PdfWriter.GetInstance(doc1, new FileStream(path + "/vykaz_f.pdf", FileMode.Append));
            Document doc1 = new Document();
            doc1.Open();
            doc1.Add(new Paragraph("lila"));
            //Image PNG = Image.GetInstance(imagepath +  "/obr1.png");
            //doc1.Add(PNG);
            doc1.Close();*/
        }


    


        
}
